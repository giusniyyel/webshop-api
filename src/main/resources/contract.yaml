openapi: 3.0.3
info:
  version: 1.0.0
  title: Webshop API
  description: >-
    This is a sample Webshop API made according to the task: **Building a Spring
    Web Application using Contract First Approach with Gradle based on the
    OpenAPI 3.0 specification**.
  contact:
    email: giusniyyel@gmail.com
externalDocs:
  description: PostgreSQL Sample Database
  url: https://github.com/JannikArndt/PostgreSQLSampleDatabase
servers:
  - url: https://localhost/webshop/api/v1
tags:
  - name: Customers
    description: Anything about customers
  - name: Addresses
    description: Operations about addresses
  - name: Labels
    description: Access to labels information
  - name: Products
    description: Access to products information
  - name: Orders
    description: Operations related to managing orders
  - name: Order Positions
    description: Operations about order positions
  - name: Article
    description: Anything about articles
  - name: Stock
    description: Access to stock information
  - name: Color
    description: Access to colors information
paths:
  /customers:
    get:
      operationId: getAllCustomers
      tags:
        - Customers
      description: Returns a list with all customers on database
      summary: Retrieves a list of all customers
      responses:
        '200':
          description: A list of customers.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
    post:
      operationId: createCustomer
      tags:
        - Customers
      description: Adds a new customer to the database
      summary: Create a new customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Customer Successfully Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Bad request
        '500':
          description: Internal server error
    put:
      operationId: updateCustomer
      tags:
        - Customers
      description: Update an existing customer
      summary: Update an existing customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Customer Successfully Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Bad request
        '404':
          description: Not found
        '405':
          description: Validation Exception
        '500':
          description: Internal server error
  /customers/{id}:
    get:
      tags:
        - Customers
      summary: Find a customer by ID
      description: Returns a single customer
      parameters:
        - in: path
          name: id
          description: The ID of the customer to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Not found
components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the customer
        firstname:
          type: string
          description: The first name of the customer
        lastname:
          type: string
          description: The last name of the customer
        gender:
          type: string
          description: The gender of the customer
          enum:
            - male
            - female
        email:
          type: string
          format: email
          description: The email address of the customer
        dateofbirth:
          type: string
          format: date
          description: The date of birth of the customer
        currentaddressid:
          type: integer
          format: int64
          description: The ID of the customer's current address
        created:
          type: string
          format: date-time
          description: The date and time the customer was created
        updated:
          type: string
          format: date-time
          description: The date and time the customer was last updated
      required:
        - firstname
        - lastname
        - gender
        - email
        - dateofbirth
        - currentaddressid
      example:
        id: 214
        firstname: Emanuel
        lastname: Mathieu
        gender: male
        email: emanuel.mathieu@example.com
        dateofbirth: '1957-04-08T00:00:00.000Z'
        currentaddressid: 214
        created: 2018-08-02 06:37:18.409 -0500
        updated: null
